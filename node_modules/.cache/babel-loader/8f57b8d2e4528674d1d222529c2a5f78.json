{"ast":null,"code":"import * as CONSTANTS from \"./Constants\";\n/*\r\n * Some part of application state is stored in redux.\r\n */\n\nconst initialState = {\n  cartItems: [],\n  showCartDialog: false,\n  showMenu: true,\n  checkedOutItems: [],\n  loggedInUser: null\n};\n\nconst rootReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case CONSTANTS.ADD_ITEM_IN_CART:\n      {\n        /* User wants to add item in cart, let's first find if such item is already in cart. */\n        let index = state.cartItems.findIndex(x => x.id === action.payload.id);\n\n        if (index !== -1) {\n          /* Item is there, let's just increase its quantity */\n          let cloneCartItems = [...state.cartItems];\n          cloneCartItems[index] = { ...cloneCartItems[index],\n            quantity: state.cartItems[index].quantity + 1\n          };\n          return { ...state,\n            cartItems: cloneCartItems\n          };\n        }\n        /* Item is not there, add a new item. */\n\n\n        return { ...state,\n          cartItems: state.cartItems.concat(action.payload)\n        };\n      }\n\n    case CONSTANTS.SHOW_CART_DLG:\n      return { ...state,\n        showCartDialog: action.payload\n      };\n\n    case CONSTANTS.DELETE_CART_ITEM:\n      return { ...state,\n        cartItems: state.cartItems.filter(x => x.id !== action.payload)\n      };\n\n    case CONSTANTS.TOGGLE_MENU:\n      return { ...state,\n        showMenu: !state.showMenu\n      };\n\n    case CONSTANTS.SET_LOGGED_IN_USER:\n      return { ...state,\n        loggedInUser: action.payload\n      };\n\n    case CONSTANTS.SET_CHECKEDOUT_ITEMS:\n      return { ...state,\n        checkedOutItems: action.payload\n      };\n\n    case CONSTANTS.UPDATE_CART_ITEM_QUANTITY:\n      {\n        let index = state.cartItems.findIndex(x => x.id === action.payload.id);\n        /* Update quantity of certain item in cart */\n\n        if (index !== -1) {\n          let cloneCartItems = [...state.cartItems];\n          cloneCartItems[index] = { ...cloneCartItems[index],\n            quantity: action.payload.quantity\n          };\n          return { ...state,\n            cartItems: cloneCartItems\n          };\n        }\n\n        return state;\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"names":["CONSTANTS","initialState","cartItems","showCartDialog","showMenu","checkedOutItems","loggedInUser","rootReducer","state","action","type","ADD_ITEM_IN_CART","index","findIndex","x","id","payload","cloneCartItems","quantity","concat","SHOW_CART_DLG","DELETE_CART_ITEM","filter","TOGGLE_MENU","SET_LOGGED_IN_USER","SET_CHECKEDOUT_ITEMS","UPDATE_CART_ITEM_QUANTITY"],"sources":["C:/Users/caoma/Downloads/another/online-shop/src/Redux/Reducer.js"],"sourcesContent":["import * as CONSTANTS from \"./Constants\";\r\n\r\n/*\r\n * Some part of application state is stored in redux.\r\n */\r\nconst initialState = {\r\n    cartItems: [],\r\n    showCartDialog: false,\r\n    showMenu: true,\r\n    checkedOutItems: [],\r\n    loggedInUser: null,\r\n\r\n};\r\n\r\nconst rootReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n       \r\n        case CONSTANTS.ADD_ITEM_IN_CART: {\r\n\r\n            /* User wants to add item in cart, let's first find if such item is already in cart. */\r\n            let index = state.cartItems.findIndex(x => x.id === action.payload.id);\r\n\r\n            if (index !== -1) {\r\n\r\n                /* Item is there, let's just increase its quantity */\r\n                let cloneCartItems = [...state.cartItems];\r\n                cloneCartItems[index] = {\r\n                    ...cloneCartItems[index],\r\n                    quantity: state.cartItems[index].quantity + 1\r\n                };\r\n\r\n                return { ...state, cartItems: cloneCartItems }\r\n            }\r\n\r\n            /* Item is not there, add a new item. */\r\n            return { ...state, cartItems: state.cartItems.concat(action.payload) }\r\n\r\n        }\r\n        case CONSTANTS.SHOW_CART_DLG:\r\n            return { ...state, showCartDialog: action.payload };\r\n        case CONSTANTS.DELETE_CART_ITEM:\r\n            return { ...state, cartItems: state.cartItems.filter(x => x.id !== action.payload) };\r\n        case CONSTANTS.TOGGLE_MENU:\r\n            return { ...state, showMenu: !state.showMenu };\r\n        case CONSTANTS.SET_LOGGED_IN_USER:\r\n            return { ...state, loggedInUser: action.payload };\r\n        case CONSTANTS.SET_CHECKEDOUT_ITEMS:\r\n            return { ...state, checkedOutItems: action.payload }\r\n        case CONSTANTS.UPDATE_CART_ITEM_QUANTITY: {\r\n            let index = state.cartItems.findIndex(x => x.id === action.payload.id);\r\n\r\n            /* Update quantity of certain item in cart */\r\n            if (index !== -1) {\r\n                let cloneCartItems = [...state.cartItems];\r\n                cloneCartItems[index] = {\r\n                    ...cloneCartItems[index],\r\n                    quantity: action.payload.quantity\r\n                };\r\n\r\n                return { ...state, cartItems: cloneCartItems }\r\n            }\r\n\r\n            return state;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default rootReducer;"],"mappings":"AAAA,OAAO,KAAKA,SAAZ,MAA2B,aAA3B;AAEA;AACA;AACA;;AACA,MAAMC,YAAY,GAAG;EACjBC,SAAS,EAAE,EADM;EAEjBC,cAAc,EAAE,KAFC;EAGjBC,QAAQ,EAAE,IAHO;EAIjBC,eAAe,EAAE,EAJA;EAKjBC,YAAY,EAAE;AALG,CAArB;;AASA,MAAMC,WAAW,GAAG,YAAkC;EAAA,IAAjCC,KAAiC,uEAAzBP,YAAyB;EAAA,IAAXQ,MAAW;;EAElD,QAAQA,MAAM,CAACC,IAAf;IAEI,KAAKV,SAAS,CAACW,gBAAf;MAAiC;QAE7B;QACA,IAAIC,KAAK,GAAGJ,KAAK,CAACN,SAAN,CAAgBW,SAAhB,CAA0BC,CAAC,IAAIA,CAAC,CAACC,EAAF,KAASN,MAAM,CAACO,OAAP,CAAeD,EAAvD,CAAZ;;QAEA,IAAIH,KAAK,KAAK,CAAC,CAAf,EAAkB;UAEd;UACA,IAAIK,cAAc,GAAG,CAAC,GAAGT,KAAK,CAACN,SAAV,CAArB;UACAe,cAAc,CAACL,KAAD,CAAd,GAAwB,EACpB,GAAGK,cAAc,CAACL,KAAD,CADG;YAEpBM,QAAQ,EAAEV,KAAK,CAACN,SAAN,CAAgBU,KAAhB,EAAuBM,QAAvB,GAAkC;UAFxB,CAAxB;UAKA,OAAO,EAAE,GAAGV,KAAL;YAAYN,SAAS,EAAEe;UAAvB,CAAP;QACH;QAED;;;QACA,OAAO,EAAE,GAAGT,KAAL;UAAYN,SAAS,EAAEM,KAAK,CAACN,SAAN,CAAgBiB,MAAhB,CAAuBV,MAAM,CAACO,OAA9B;QAAvB,CAAP;MAEH;;IACD,KAAKhB,SAAS,CAACoB,aAAf;MACI,OAAO,EAAE,GAAGZ,KAAL;QAAYL,cAAc,EAAEM,MAAM,CAACO;MAAnC,CAAP;;IACJ,KAAKhB,SAAS,CAACqB,gBAAf;MACI,OAAO,EAAE,GAAGb,KAAL;QAAYN,SAAS,EAAEM,KAAK,CAACN,SAAN,CAAgBoB,MAAhB,CAAuBR,CAAC,IAAIA,CAAC,CAACC,EAAF,KAASN,MAAM,CAACO,OAA5C;MAAvB,CAAP;;IACJ,KAAKhB,SAAS,CAACuB,WAAf;MACI,OAAO,EAAE,GAAGf,KAAL;QAAYJ,QAAQ,EAAE,CAACI,KAAK,CAACJ;MAA7B,CAAP;;IACJ,KAAKJ,SAAS,CAACwB,kBAAf;MACI,OAAO,EAAE,GAAGhB,KAAL;QAAYF,YAAY,EAAEG,MAAM,CAACO;MAAjC,CAAP;;IACJ,KAAKhB,SAAS,CAACyB,oBAAf;MACI,OAAO,EAAE,GAAGjB,KAAL;QAAYH,eAAe,EAAEI,MAAM,CAACO;MAApC,CAAP;;IACJ,KAAKhB,SAAS,CAAC0B,yBAAf;MAA0C;QACtC,IAAId,KAAK,GAAGJ,KAAK,CAACN,SAAN,CAAgBW,SAAhB,CAA0BC,CAAC,IAAIA,CAAC,CAACC,EAAF,KAASN,MAAM,CAACO,OAAP,CAAeD,EAAvD,CAAZ;QAEA;;QACA,IAAIH,KAAK,KAAK,CAAC,CAAf,EAAkB;UACd,IAAIK,cAAc,GAAG,CAAC,GAAGT,KAAK,CAACN,SAAV,CAArB;UACAe,cAAc,CAACL,KAAD,CAAd,GAAwB,EACpB,GAAGK,cAAc,CAACL,KAAD,CADG;YAEpBM,QAAQ,EAAET,MAAM,CAACO,OAAP,CAAeE;UAFL,CAAxB;UAKA,OAAO,EAAE,GAAGV,KAAL;YAAYN,SAAS,EAAEe;UAAvB,CAAP;QACH;;QAED,OAAOT,KAAP;MACH;;IACD;MACI,OAAOA,KAAP;EAlDR;AAoDH,CAtDD;;AAwDA,eAAeD,WAAf"},"metadata":{},"sourceType":"module"}