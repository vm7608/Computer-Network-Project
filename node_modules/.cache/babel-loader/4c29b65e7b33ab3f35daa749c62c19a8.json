{"ast":null,"code":"function isAbsolute(pathname) {\n  return pathname.charAt(0) === '/';\n} // About 1.5x faster than the two-arg version of Array#splice()\n\n\nfunction spliceOne(list, index) {\n  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {\n    list[i] = list[k];\n  }\n\n  list.pop();\n} // This implementation is based heavily on node's url.parse\n\n\nfunction resolvePathname(to) {\n  var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var toParts = to && to.split('/') || [];\n  var fromParts = from && from.split('/') || [];\n  var isToAbs = to && isAbsolute(to);\n  var isFromAbs = from && isAbsolute(from);\n  var mustEndAbs = isToAbs || isFromAbs;\n\n  if (to && isAbsolute(to)) {\n    // to is absolute\n    fromParts = toParts;\n  } else if (toParts.length) {\n    // to is relative, drop the filename\n    fromParts.pop();\n    fromParts = fromParts.concat(toParts);\n  }\n\n  if (!fromParts.length) return '/';\n  var hasTrailingSlash = void 0;\n\n  if (fromParts.length) {\n    var last = fromParts[fromParts.length - 1];\n    hasTrailingSlash = last === '.' || last === '..' || last === '';\n  } else {\n    hasTrailingSlash = false;\n  }\n\n  var up = 0;\n\n  for (var i = fromParts.length; i >= 0; i--) {\n    var part = fromParts[i];\n\n    if (part === '.') {\n      spliceOne(fromParts, i);\n    } else if (part === '..') {\n      spliceOne(fromParts, i);\n      up++;\n    } else if (up) {\n      spliceOne(fromParts, i);\n      up--;\n    }\n  }\n\n  if (!mustEndAbs) for (; up--; up) {\n    fromParts.unshift('..');\n  }\n  if (mustEndAbs && fromParts[0] !== '' && (!fromParts[0] || !isAbsolute(fromParts[0]))) fromParts.unshift('');\n  var result = fromParts.join('/');\n  if (hasTrailingSlash && result.substr(-1) !== '/') result += '/';\n  return result;\n}\n\nexport default resolvePathname;","map":{"version":3,"names":["isAbsolute","pathname","charAt","spliceOne","list","index","i","k","n","length","pop","resolvePathname","to","from","arguments","undefined","toParts","split","fromParts","isToAbs","isFromAbs","mustEndAbs","concat","hasTrailingSlash","last","up","part","unshift","result","join","substr"],"sources":["C:/Users/caoma/Downloads/online-shop/node_modules/resolve-pathname/index.js"],"sourcesContent":["function isAbsolute(pathname) {\n  return pathname.charAt(0) === '/';\n}\n\n// About 1.5x faster than the two-arg version of Array#splice()\nfunction spliceOne(list, index) {\n  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {\n    list[i] = list[k];\n  }\n\n  list.pop();\n}\n\n// This implementation is based heavily on node's url.parse\nfunction resolvePathname(to) {\n  var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n  var toParts = to && to.split('/') || [];\n  var fromParts = from && from.split('/') || [];\n\n  var isToAbs = to && isAbsolute(to);\n  var isFromAbs = from && isAbsolute(from);\n  var mustEndAbs = isToAbs || isFromAbs;\n\n  if (to && isAbsolute(to)) {\n    // to is absolute\n    fromParts = toParts;\n  } else if (toParts.length) {\n    // to is relative, drop the filename\n    fromParts.pop();\n    fromParts = fromParts.concat(toParts);\n  }\n\n  if (!fromParts.length) return '/';\n\n  var hasTrailingSlash = void 0;\n  if (fromParts.length) {\n    var last = fromParts[fromParts.length - 1];\n    hasTrailingSlash = last === '.' || last === '..' || last === '';\n  } else {\n    hasTrailingSlash = false;\n  }\n\n  var up = 0;\n  for (var i = fromParts.length; i >= 0; i--) {\n    var part = fromParts[i];\n\n    if (part === '.') {\n      spliceOne(fromParts, i);\n    } else if (part === '..') {\n      spliceOne(fromParts, i);\n      up++;\n    } else if (up) {\n      spliceOne(fromParts, i);\n      up--;\n    }\n  }\n\n  if (!mustEndAbs) for (; up--; up) {\n    fromParts.unshift('..');\n  }if (mustEndAbs && fromParts[0] !== '' && (!fromParts[0] || !isAbsolute(fromParts[0]))) fromParts.unshift('');\n\n  var result = fromParts.join('/');\n\n  if (hasTrailingSlash && result.substr(-1) !== '/') result += '/';\n\n  return result;\n}\n\nexport default resolvePathname;"],"mappings":"AAAA,SAASA,UAAT,CAAoBC,QAApB,EAA8B;EAC5B,OAAOA,QAAQ,CAACC,MAAT,CAAgB,CAAhB,MAAuB,GAA9B;AACD,C,CAED;;;AACA,SAASC,SAAT,CAAmBC,IAAnB,EAAyBC,KAAzB,EAAgC;EAC9B,KAAK,IAAIC,CAAC,GAAGD,KAAR,EAAeE,CAAC,GAAGD,CAAC,GAAG,CAAvB,EAA0BE,CAAC,GAAGJ,IAAI,CAACK,MAAxC,EAAgDF,CAAC,GAAGC,CAApD,EAAuDF,CAAC,IAAI,CAAL,EAAQC,CAAC,IAAI,CAApE,EAAuE;IACrEH,IAAI,CAACE,CAAD,CAAJ,GAAUF,IAAI,CAACG,CAAD,CAAd;EACD;;EAEDH,IAAI,CAACM,GAAL;AACD,C,CAED;;;AACA,SAASC,eAAT,CAAyBC,EAAzB,EAA6B;EAC3B,IAAIC,IAAI,GAAGC,SAAS,CAACL,MAAV,GAAmB,CAAnB,IAAwBK,SAAS,CAAC,CAAD,CAAT,KAAiBC,SAAzC,GAAqDD,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAA/E;EAEA,IAAIE,OAAO,GAAGJ,EAAE,IAAIA,EAAE,CAACK,KAAH,CAAS,GAAT,CAAN,IAAuB,EAArC;EACA,IAAIC,SAAS,GAAGL,IAAI,IAAIA,IAAI,CAACI,KAAL,CAAW,GAAX,CAAR,IAA2B,EAA3C;EAEA,IAAIE,OAAO,GAAGP,EAAE,IAAIZ,UAAU,CAACY,EAAD,CAA9B;EACA,IAAIQ,SAAS,GAAGP,IAAI,IAAIb,UAAU,CAACa,IAAD,CAAlC;EACA,IAAIQ,UAAU,GAAGF,OAAO,IAAIC,SAA5B;;EAEA,IAAIR,EAAE,IAAIZ,UAAU,CAACY,EAAD,CAApB,EAA0B;IACxB;IACAM,SAAS,GAAGF,OAAZ;EACD,CAHD,MAGO,IAAIA,OAAO,CAACP,MAAZ,EAAoB;IACzB;IACAS,SAAS,CAACR,GAAV;IACAQ,SAAS,GAAGA,SAAS,CAACI,MAAV,CAAiBN,OAAjB,CAAZ;EACD;;EAED,IAAI,CAACE,SAAS,CAACT,MAAf,EAAuB,OAAO,GAAP;EAEvB,IAAIc,gBAAgB,GAAG,KAAK,CAA5B;;EACA,IAAIL,SAAS,CAACT,MAAd,EAAsB;IACpB,IAAIe,IAAI,GAAGN,SAAS,CAACA,SAAS,CAACT,MAAV,GAAmB,CAApB,CAApB;IACAc,gBAAgB,GAAGC,IAAI,KAAK,GAAT,IAAgBA,IAAI,KAAK,IAAzB,IAAiCA,IAAI,KAAK,EAA7D;EACD,CAHD,MAGO;IACLD,gBAAgB,GAAG,KAAnB;EACD;;EAED,IAAIE,EAAE,GAAG,CAAT;;EACA,KAAK,IAAInB,CAAC,GAAGY,SAAS,CAACT,MAAvB,EAA+BH,CAAC,IAAI,CAApC,EAAuCA,CAAC,EAAxC,EAA4C;IAC1C,IAAIoB,IAAI,GAAGR,SAAS,CAACZ,CAAD,CAApB;;IAEA,IAAIoB,IAAI,KAAK,GAAb,EAAkB;MAChBvB,SAAS,CAACe,SAAD,EAAYZ,CAAZ,CAAT;IACD,CAFD,MAEO,IAAIoB,IAAI,KAAK,IAAb,EAAmB;MACxBvB,SAAS,CAACe,SAAD,EAAYZ,CAAZ,CAAT;MACAmB,EAAE;IACH,CAHM,MAGA,IAAIA,EAAJ,EAAQ;MACbtB,SAAS,CAACe,SAAD,EAAYZ,CAAZ,CAAT;MACAmB,EAAE;IACH;EACF;;EAED,IAAI,CAACJ,UAAL,EAAiB,OAAOI,EAAE,EAAT,EAAaA,EAAb,EAAiB;IAChCP,SAAS,CAACS,OAAV,CAAkB,IAAlB;EACD;EAAA,IAAIN,UAAU,IAAIH,SAAS,CAAC,CAAD,CAAT,KAAiB,EAA/B,KAAsC,CAACA,SAAS,CAAC,CAAD,CAAV,IAAiB,CAAClB,UAAU,CAACkB,SAAS,CAAC,CAAD,CAAV,CAAlE,CAAJ,EAAuFA,SAAS,CAACS,OAAV,CAAkB,EAAlB;EAExF,IAAIC,MAAM,GAAGV,SAAS,CAACW,IAAV,CAAe,GAAf,CAAb;EAEA,IAAIN,gBAAgB,IAAIK,MAAM,CAACE,MAAP,CAAc,CAAC,CAAf,MAAsB,GAA9C,EAAmDF,MAAM,IAAI,GAAV;EAEnD,OAAOA,MAAP;AACD;;AAED,eAAejB,eAAf"},"metadata":{},"sourceType":"module"}