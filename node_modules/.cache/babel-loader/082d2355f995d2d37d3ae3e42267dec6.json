{"ast":null,"code":"'use strict';\n\nvar StateInline = require('../rules_inline/state_inline');\n\nvar parseLinkLabel = require('../helpers/parse_link_label');\n\nvar parseLinkDestination = require('../helpers/parse_link_destination');\n\nvar parseLinkTitle = require('../helpers/parse_link_title');\n\nvar normalizeReference = require('../helpers/normalize_reference');\n\nfunction parseReference(str, parser, options, env) {\n  var state, labelEnd, pos, max, code, start, href, title, label;\n\n  if (str.charCodeAt(0) !== 0x5B\n  /* [ */\n  ) {\n    return -1;\n  }\n\n  if (str.indexOf(']:') === -1) {\n    return -1;\n  }\n\n  state = new StateInline(str, parser, options, env, []);\n  labelEnd = parseLinkLabel(state, 0);\n\n  if (labelEnd < 0 || str.charCodeAt(labelEnd + 1) !== 0x3A\n  /* : */\n  ) {\n    return -1;\n  }\n\n  max = state.posMax; // [label]:   destination   'title'\n  //         ^^^ skip optional whitespace here\n\n  for (pos = labelEnd + 2; pos < max; pos++) {\n    code = state.src.charCodeAt(pos);\n\n    if (code !== 0x20 && code !== 0x0A) {\n      break;\n    }\n  } // [label]:   destination   'title'\n  //            ^^^^^^^^^^^ parse this\n\n\n  if (!parseLinkDestination(state, pos)) {\n    return -1;\n  }\n\n  href = state.linkContent;\n  pos = state.pos; // [label]:   destination   'title'\n  //                       ^^^ skipping those spaces\n\n  start = pos;\n\n  for (pos = pos + 1; pos < max; pos++) {\n    code = state.src.charCodeAt(pos);\n\n    if (code !== 0x20 && code !== 0x0A) {\n      break;\n    }\n  } // [label]:   destination   'title'\n  //                          ^^^^^^^ parse this\n\n\n  if (pos < max && start !== pos && parseLinkTitle(state, pos)) {\n    title = state.linkContent;\n    pos = state.pos;\n  } else {\n    title = '';\n    pos = start;\n  } // ensure that the end of the line is empty\n\n\n  while (pos < max && state.src.charCodeAt(pos) === 0x20\n  /* space */\n  ) {\n    pos++;\n  }\n\n  if (pos < max && state.src.charCodeAt(pos) !== 0x0A) {\n    return -1;\n  }\n\n  label = normalizeReference(str.slice(1, labelEnd));\n\n  if (typeof env.references[label] === 'undefined') {\n    env.references[label] = {\n      title: title,\n      href: href\n    };\n  }\n\n  return pos;\n}\n\nmodule.exports = function references(state) {\n  var tokens = state.tokens,\n      i,\n      l,\n      content,\n      pos;\n  state.env.references = state.env.references || {};\n\n  if (state.inlineMode) {\n    return;\n  } // Scan definitions in paragraph inlines\n\n\n  for (i = 1, l = tokens.length - 1; i < l; i++) {\n    if (tokens[i].type === 'inline' && tokens[i - 1].type === 'paragraph_open' && tokens[i + 1].type === 'paragraph_close') {\n      content = tokens[i].content;\n\n      while (content.length) {\n        pos = parseReference(content, state.inline, state.options, state.env);\n\n        if (pos < 0) {\n          break;\n        }\n\n        content = content.slice(pos).trim();\n      }\n\n      tokens[i].content = content;\n\n      if (!content.length) {\n        tokens[i - 1].tight = true;\n        tokens[i + 1].tight = true;\n      }\n    }\n  }\n};","map":{"version":3,"names":["StateInline","require","parseLinkLabel","parseLinkDestination","parseLinkTitle","normalizeReference","parseReference","str","parser","options","env","state","labelEnd","pos","max","code","start","href","title","label","charCodeAt","indexOf","posMax","src","linkContent","slice","references","module","exports","tokens","i","l","content","inlineMode","length","type","inline","trim","tight"],"sources":["C:/Users/caoma/Downloads/another/online-shop/node_modules/remarkable/lib/rules_core/references.js"],"sourcesContent":["'use strict';\n\n\nvar StateInline          = require('../rules_inline/state_inline');\nvar parseLinkLabel       = require('../helpers/parse_link_label');\nvar parseLinkDestination = require('../helpers/parse_link_destination');\nvar parseLinkTitle       = require('../helpers/parse_link_title');\nvar normalizeReference   = require('../helpers/normalize_reference');\n\n\nfunction parseReference(str, parser, options, env) {\n  var state, labelEnd, pos, max, code, start, href, title, label;\n\n  if (str.charCodeAt(0) !== 0x5B/* [ */) { return -1; }\n\n  if (str.indexOf(']:') === -1) { return -1; }\n\n  state = new StateInline(str, parser, options, env, []);\n  labelEnd = parseLinkLabel(state, 0);\n\n  if (labelEnd < 0 || str.charCodeAt(labelEnd + 1) !== 0x3A/* : */) { return -1; }\n\n  max = state.posMax;\n\n  // [label]:   destination   'title'\n  //         ^^^ skip optional whitespace here\n  for (pos = labelEnd + 2; pos < max; pos++) {\n    code = state.src.charCodeAt(pos);\n    if (code !== 0x20 && code !== 0x0A) { break; }\n  }\n\n  // [label]:   destination   'title'\n  //            ^^^^^^^^^^^ parse this\n  if (!parseLinkDestination(state, pos)) { return -1; }\n  href = state.linkContent;\n  pos = state.pos;\n\n  // [label]:   destination   'title'\n  //                       ^^^ skipping those spaces\n  start = pos;\n  for (pos = pos + 1; pos < max; pos++) {\n    code = state.src.charCodeAt(pos);\n    if (code !== 0x20 && code !== 0x0A) { break; }\n  }\n\n  // [label]:   destination   'title'\n  //                          ^^^^^^^ parse this\n  if (pos < max && start !== pos && parseLinkTitle(state, pos)) {\n    title = state.linkContent;\n    pos = state.pos;\n  } else {\n    title = '';\n    pos = start;\n  }\n\n  // ensure that the end of the line is empty\n  while (pos < max && state.src.charCodeAt(pos) === 0x20/* space */) { pos++; }\n  if (pos < max && state.src.charCodeAt(pos) !== 0x0A) { return -1; }\n\n  label = normalizeReference(str.slice(1, labelEnd));\n  if (typeof env.references[label] === 'undefined') {\n    env.references[label] = { title: title, href: href };\n  }\n\n  return pos;\n}\n\n\nmodule.exports = function references(state) {\n  var tokens = state.tokens, i, l, content, pos;\n\n  state.env.references = state.env.references || {};\n\n  if (state.inlineMode) {\n    return;\n  }\n\n  // Scan definitions in paragraph inlines\n  for (i = 1, l = tokens.length - 1; i < l; i++) {\n    if (tokens[i].type === 'inline' &&\n        tokens[i - 1].type === 'paragraph_open' &&\n        tokens[i + 1].type === 'paragraph_close') {\n\n      content = tokens[i].content;\n      while (content.length) {\n        pos = parseReference(content, state.inline, state.options, state.env);\n        if (pos < 0) { break; }\n        content = content.slice(pos).trim();\n      }\n\n      tokens[i].content = content;\n      if (!content.length) {\n        tokens[i - 1].tight = true;\n        tokens[i + 1].tight = true;\n      }\n    }\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}